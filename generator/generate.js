import { existsSync, readFileSync, writeFileSync, unlinkSync } from 'node:fs';
import got from 'got';
import neat from 'neat-csv';
import { camelCase } from 'lodash-es';

import { localNamesBy3 } from './localNames.js';

const args = {
  fetch: process.argv.includes('--fetch'),
  noCache: process.argv.includes('--no-cache'),
  verbose: process.argv.includes('--verbose'),
};

console.verbose = (...s) => { args.verbose && console.log('[verbose]', ...s); };

async function readTab(fileName) {
  let tab;
  const fileUrl = new URL(`./data/${fileName}`, import.meta.url);
  if (existsSync(fileUrl) && !args.fetch) {
    console.log(`Using cached copy of ${fileName}`);
    tab = readFileSync(fileUrl);
  } else {
    if (args.fetch) {
      console.verbose(`Removing data/${fileName}`);
      unlinkSync(fileUrl);
    }
    console.log(`Downloading ${fileName}`);
    tab = await got(`https://iso639-3.sil.org/sites/iso639-3/files/downloads/${fileName}`).buffer();
    if (!args.noCache && !process.env.CI) {
      console.verbose(`Saving table to data/${fileName}`);
      writeFileSync(fileUrl, tab);
    }
  }
  return neat(tab, { separator: '\t', mapHeaders: ({ header }) => camelCase(header) });
}

/** @type {Array.<{ id: string, part2B: string, part2T: string, part1: string, scope: string, languageType: string, refName: string, comment: string }>} */
const iso639 = await readTab('iso-639-3.tab');

/** @type {Object.<string, { printName: string, invertedName: string }>} */
const nameIndex = (await readTab('iso-639-3_Name_Index.tab')).reduce((p, { id, printName, invertedName }) => { p[id] = { printName, invertedName }; return p; }, {});

// ! NOTE: the warning below does not apply to this file.
const lines = [
  '',
  '/*',
  '  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!',
  '  ! DO NOT EDIT THIS FILE MANUALLY! It is automatically generated.  !',
  '  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!',
  '*/',
  '',
  'import type { Language } from \'./language.interface\';',
  '',
  'var $data: Language[] = [',
];

for (const entry of iso639) {
  const entries = [
    [ 'name', nameIndex[entry.id].printName ],
    [ 'local', localNamesBy3[entry.id] || null ],
    [ 1, entry.part1 || null ],
    [ 2, entry.part2T || null ],
    [ '2T', entry.part2T || null ],
    [ '2B', entry.part2B || null ],
    [ 3, entry.id ],
    [ 'invertedName', nameIndex[entry.id].invertedName ],
    [ 'refName', entry.refName ],
    [ 'type', entry.languageType ],
    [ 'scope', entry.scope ],
  ];

  let line = '  {';
  for (const [key, value] of entries) {
    if (typeof key === 'number' || !/^\d/.test(key)) {
      line += ` ${key}: `;
    } else {
      line += ` '${key}': `;
    }
    if (value === null) {
      line += `${value},`;
    } else {
      line += `'${value.replace(/'/g, '\\\'')}',`;
    }
  }
  line = line.slice(0, -1) + ' },';

  lines.push(line);
}
lines.push('];', '', 'export default $data;', '');

writeFileSync(new URL('../src/data.ts', import.meta.url), lines.join('\n'));
